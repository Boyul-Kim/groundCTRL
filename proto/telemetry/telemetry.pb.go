// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/telemetry/telemetry.proto

package groundctrl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataChunk struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SatelliteId       string                 `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	Timestamp         int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BusVoltage        float32                `protobuf:"fixed32,3,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`
	BatteryTemp       float32                `protobuf:"fixed32,4,opt,name=battery_temp,json=batteryTemp,proto3" json:"battery_temp,omitempty"`
	CpuTemp           float32                `protobuf:"fixed32,5,opt,name=cpu_temp,json=cpuTemp,proto3" json:"cpu_temp,omitempty"`
	SolarPanelCurrent float32                `protobuf:"fixed32,6,opt,name=solar_panel_current,json=solarPanelCurrent,proto3" json:"solar_panel_current,omitempty"`
	AttitudeMode      string                 `protobuf:"bytes,7,opt,name=attitude_mode,json=attitudeMode,proto3" json:"attitude_mode,omitempty"`
	GyroX             float32                `protobuf:"fixed32,8,opt,name=gyro_x,json=gyroX,proto3" json:"gyro_x,omitempty"`
	GyroY             float32                `protobuf:"fixed32,9,opt,name=gyro_y,json=gyroY,proto3" json:"gyro_y,omitempty"`
	GyroZ             float32                `protobuf:"fixed32,10,opt,name=gyro_z,json=gyroZ,proto3" json:"gyro_z,omitempty"`
	SunSensorAngle    float32                `protobuf:"fixed32,11,opt,name=sun_sensor_angle,json=sunSensorAngle,proto3" json:"sun_sensor_angle,omitempty"`
	CommLink          string                 `protobuf:"bytes,12,opt,name=comm_link,json=commLink,proto3" json:"comm_link,omitempty"`
	LastCommandAck    string                 `protobuf:"bytes,13,opt,name=last_command_ack,json=lastCommandAck,proto3" json:"last_command_ack,omitempty"`
	ErrorFlags        int32                  `protobuf:"varint,14,opt,name=error_flags,json=errorFlags,proto3" json:"error_flags,omitempty"`
	SafeMode          bool                   `protobuf:"varint,15,opt,name=safe_mode,json=safeMode,proto3" json:"safe_mode,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	mi := &file_proto_telemetry_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *DataChunk) GetSatelliteId() string {
	if x != nil {
		return x.SatelliteId
	}
	return ""
}

func (x *DataChunk) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataChunk) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *DataChunk) GetBatteryTemp() float32 {
	if x != nil {
		return x.BatteryTemp
	}
	return 0
}

func (x *DataChunk) GetCpuTemp() float32 {
	if x != nil {
		return x.CpuTemp
	}
	return 0
}

func (x *DataChunk) GetSolarPanelCurrent() float32 {
	if x != nil {
		return x.SolarPanelCurrent
	}
	return 0
}

func (x *DataChunk) GetAttitudeMode() string {
	if x != nil {
		return x.AttitudeMode
	}
	return ""
}

func (x *DataChunk) GetGyroX() float32 {
	if x != nil {
		return x.GyroX
	}
	return 0
}

func (x *DataChunk) GetGyroY() float32 {
	if x != nil {
		return x.GyroY
	}
	return 0
}

func (x *DataChunk) GetGyroZ() float32 {
	if x != nil {
		return x.GyroZ
	}
	return 0
}

func (x *DataChunk) GetSunSensorAngle() float32 {
	if x != nil {
		return x.SunSensorAngle
	}
	return 0
}

func (x *DataChunk) GetCommLink() string {
	if x != nil {
		return x.CommLink
	}
	return ""
}

func (x *DataChunk) GetLastCommandAck() string {
	if x != nil {
		return x.LastCommandAck
	}
	return ""
}

func (x *DataChunk) GetErrorFlags() int32 {
	if x != nil {
		return x.ErrorFlags
	}
	return 0
}

func (x *DataChunk) GetSafeMode() bool {
	if x != nil {
		return x.SafeMode
	}
	return false
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_proto_telemetry_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_proto_telemetry_telemetry_proto protoreflect.FileDescriptor

const file_proto_telemetry_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x1fproto/telemetry/telemetry.proto\x12\n" +
	"groundctrl\"\xf4\x03\n" +
	"\tDataChunk\x12!\n" +
	"\fsatellite_id\x18\x01 \x01(\tR\vsatelliteId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x1f\n" +
	"\vbus_voltage\x18\x03 \x01(\x02R\n" +
	"busVoltage\x12!\n" +
	"\fbattery_temp\x18\x04 \x01(\x02R\vbatteryTemp\x12\x19\n" +
	"\bcpu_temp\x18\x05 \x01(\x02R\acpuTemp\x12.\n" +
	"\x13solar_panel_current\x18\x06 \x01(\x02R\x11solarPanelCurrent\x12#\n" +
	"\rattitude_mode\x18\a \x01(\tR\fattitudeMode\x12\x15\n" +
	"\x06gyro_x\x18\b \x01(\x02R\x05gyroX\x12\x15\n" +
	"\x06gyro_y\x18\t \x01(\x02R\x05gyroY\x12\x15\n" +
	"\x06gyro_z\x18\n" +
	" \x01(\x02R\x05gyroZ\x12(\n" +
	"\x10sun_sensor_angle\x18\v \x01(\x02R\x0esunSensorAngle\x12\x1b\n" +
	"\tcomm_link\x18\f \x01(\tR\bcommLink\x12(\n" +
	"\x10last_command_ack\x18\r \x01(\tR\x0elastCommandAck\x12\x1f\n" +
	"\verror_flags\x18\x0e \x01(\x05R\n" +
	"errorFlags\x12\x1b\n" +
	"\tsafe_mode\x18\x0f \x01(\bR\bsafeMode\"\x1d\n" +
	"\x03Ack\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status2M\n" +
	"\x11TelemetryIngestor\x128\n" +
	"\n" +
	"StreamData\x12\x15.groundctrl.DataChunk\x1a\x0f.groundctrl.Ack(\x010\x01B=Z;github.com/Boyul-Kim/groundCTRL/proto/groundctrl;groundctrlb\x06proto3"

var (
	file_proto_telemetry_telemetry_proto_rawDescOnce sync.Once
	file_proto_telemetry_telemetry_proto_rawDescData []byte
)

func file_proto_telemetry_telemetry_proto_rawDescGZIP() []byte {
	file_proto_telemetry_telemetry_proto_rawDescOnce.Do(func() {
		file_proto_telemetry_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_telemetry_telemetry_proto_rawDesc), len(file_proto_telemetry_telemetry_proto_rawDesc)))
	})
	return file_proto_telemetry_telemetry_proto_rawDescData
}

var file_proto_telemetry_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_telemetry_telemetry_proto_goTypes = []any{
	(*DataChunk)(nil), // 0: groundctrl.DataChunk
	(*Ack)(nil),       // 1: groundctrl.Ack
}
var file_proto_telemetry_telemetry_proto_depIdxs = []int32{
	0, // 0: groundctrl.TelemetryIngestor.StreamData:input_type -> groundctrl.DataChunk
	1, // 1: groundctrl.TelemetryIngestor.StreamData:output_type -> groundctrl.Ack
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_telemetry_telemetry_proto_init() }
func file_proto_telemetry_telemetry_proto_init() {
	if File_proto_telemetry_telemetry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_telemetry_telemetry_proto_rawDesc), len(file_proto_telemetry_telemetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_telemetry_telemetry_proto_goTypes,
		DependencyIndexes: file_proto_telemetry_telemetry_proto_depIdxs,
		MessageInfos:      file_proto_telemetry_telemetry_proto_msgTypes,
	}.Build()
	File_proto_telemetry_telemetry_proto = out.File
	file_proto_telemetry_telemetry_proto_goTypes = nil
	file_proto_telemetry_telemetry_proto_depIdxs = nil
}
